{"ast":null,"code":"import { MongoClient } from 'mongodb';\nimport { compare } from 'bcrypt';\nimport { sign } from 'jsonwebtoken';\nimport { database } from '../../../middleware/database';\nconst client = new MongoClient(process.env.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nexport default database(async function login(req, res) {\n  if (req.method != 'POST') {\n    res.json({\n      status: 'POST only'\n    });\n    return;\n  }\n\n  const email = req.body.email;\n  const password = req.body.password; //\n  // Validate that parameters were supplied\n  //\n\n  if (!email || email.trim().length == 0 || !password || password.trim().length == 0) {\n    res.json({\n      status: 'Name, email, and password are all required'\n    });\n    return;\n  }\n\n  if (!client.isConnected()) {\n    await client.connect();\n  }\n\n  const db = req.db;\n  const existingUser = await db.collection('users').findOne({\n    \"email\": email\n  });\n\n  if (!existingUser) {\n    res.json({\n      status: 'Unsuccessful login'\n    });\n  } else {\n    compare(password, existingUser.password, function (err, result) {\n      //\n      // result will be true/false\n      //\n      if (!err && result) {\n        //\n        // Create json token here\n        //\n        const claims = {\n          sub: existingUser._id,\n          name: existingUser.name,\n          email: existingUser.email\n        };\n        const jwt = sign(claims, process.env.JWT_SECRET, {\n          expiresIn: '1h'\n        });\n        res.json({\n          authToken: jwt\n        });\n      } else {\n        res.json({\n          status: 'Oops.  Something went wrong'\n        });\n      }\n    });\n  }\n});","map":{"version":3,"sources":["C:/Dev/Sandbox/next/next-starter/pages/api/user/login.ts"],"names":["MongoClient","compare","sign","database","client","process","env","MONGODB_URI","useNewUrlParser","useUnifiedTopology","login","req","res","method","json","status","email","body","password","trim","length","isConnected","connect","db","existingUser","collection","findOne","err","result","claims","sub","_id","name","jwt","JWT_SECRET","expiresIn","authToken"],"mappings":"AACA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,QAAT,QAA2C,8BAA3C;AAEA,MAAMC,MAAM,GAAG,IAAIJ,WAAJ,CAAgBK,OAAO,CAACC,GAAR,CAAYC,WAA5B,EAAyC;AACpDC,EAAAA,eAAe,EAAE,IADmC;AAEpDC,EAAAA,kBAAkB,EAAE;AAFgC,CAAzC,CAAf;AAKA,eAAeN,QAAQ,CAAC,eAAeO,KAAf,CACpBC,GADoB,EAEpBC,GAFoB,EAGtB;AACE,MAAGD,GAAG,CAACE,MAAJ,IAAc,MAAjB,EAAyB;AACrBD,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAT;AACA;AACH;;AAED,QAAMC,KAAa,GAAGL,GAAG,CAACM,IAAJ,CAASD,KAA/B;AACA,QAAME,QAAgB,GAAGP,GAAG,CAACM,IAAJ,CAASC,QAAlC,CAPF,CASE;AACA;AACA;;AACA,MAAI,CAACF,KAAD,IAAUA,KAAK,CAACG,IAAN,GAAaC,MAAb,IAAuB,CAAjC,IAAsC,CAACF,QAAvC,IAAmDA,QAAQ,CAACC,IAAT,GAAgBC,MAAhB,IAA0B,CAAjF,EAAoF;AAChFR,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACA;AACH;;AAED,MAAI,CAACX,MAAM,CAACiB,WAAP,EAAL,EAA2B;AACvB,UAAMjB,MAAM,CAACkB,OAAP,EAAN;AACH;;AAED,QAAMC,EAAE,GAAGZ,GAAG,CAACY,EAAf;AACA,QAAMC,YAAY,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B;AAAE,aAASV;AAAX,GAA/B,CAA3B;;AAEA,MAAI,CAACQ,YAAL,EAAmB;AACfZ,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACH,GAFD,MAEO;AACHd,IAAAA,OAAO,CAACiB,QAAD,EAAWM,YAAY,CAACN,QAAxB,EAAkC,UAASS,GAAT,EAAcC,MAAd,EAAsB;AAC3D;AACA;AACA;AACA,UAAG,CAACD,GAAD,IAAQC,MAAX,EAAmB;AACf;AACA;AACA;AACA,cAAMC,MAAM,GAAG;AAAEC,UAAAA,GAAG,EAAEN,YAAY,CAACO,GAApB;AAAyBC,UAAAA,IAAI,EAAER,YAAY,CAACQ,IAA5C;AAAkDhB,UAAAA,KAAK,EAAEQ,YAAY,CAACR;AAAtE,SAAf;AACA,cAAMiB,GAAG,GAAG/B,IAAI,CAAC2B,MAAD,EAASxB,OAAO,CAACC,GAAR,CAAY4B,UAArB,EAAiC;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAjC,CAAhB;AAEAvB,QAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEsB,UAAAA,SAAS,EAAEH;AAAb,SAAT;AACH,OARD,MAQO;AACHrB,QAAAA,GAAG,CAACE,IAAJ,CAAU;AAACC,UAAAA,MAAM,EAAE;AAAT,SAAV;AACH;AACJ,KAfM,CAAP;AAgBH;AACJ,CA/CsB,CAAvB","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\r\nimport { MongoClient } from 'mongodb';\r\nimport { compare } from 'bcrypt';\r\nimport { sign } from 'jsonwebtoken';\r\nimport { database, MyNextApiRequest } from '../../../middleware/database';\r\n\r\nconst client = new MongoClient(process.env.MONGODB_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n});\r\n\r\nexport default database(async function login(\r\n    req: MyNextApiRequest,\r\n    res: NextApiResponse\r\n) {\r\n    if(req.method != 'POST') {\r\n        res.json({status: 'POST only'});\r\n        return;\r\n    }\r\n\r\n    const email: string = req.body.email;\r\n    const password: string = req.body.password;\r\n\r\n    //\r\n    // Validate that parameters were supplied\r\n    //\r\n    if (!email || email.trim().length == 0 || !password || password.trim().length == 0) {\r\n        res.json({ status: 'Name, email, and password are all required' });\r\n        return;\r\n    }\r\n\r\n    if (!client.isConnected()) {\r\n        await client.connect();\r\n    }\r\n\r\n    const db = req.db;\r\n    const existingUser = await db.collection('users').findOne({ \"email\": email });\r\n\r\n    if (!existingUser) {\r\n        res.json({ status: 'Unsuccessful login' });\r\n    } else {\r\n        compare(password, existingUser.password, function(err, result) {\r\n            //\r\n            // result will be true/false\r\n            //\r\n            if(!err && result) {\r\n                //\r\n                // Create json token here\r\n                //\r\n                const claims = { sub: existingUser._id, name: existingUser.name, email: existingUser.email };\r\n                const jwt = sign(claims, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n\r\n                res.json({ authToken: jwt });\r\n            } else {\r\n                res.json( {status: 'Oops.  Something went wrong'});\r\n            }\r\n        });\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}