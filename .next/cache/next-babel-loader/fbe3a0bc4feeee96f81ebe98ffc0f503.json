{"ast":null,"code":"import { MongoClient } from 'mongodb';\nimport { verify } from 'jsonwebtoken';\n\nconst authenticated = fn => async (req, res) => {\n  var decoded = verify(req.headers.authorization, process.env.JWT_SECRET, async function (err, decoded) {\n    if (!err && decoded) {\n      return await fn(req, res);\n    }\n\n    res.status(500).json({\n      message: 'Sorry you are not authenticated'\n    });\n  });\n};\n\nconst client = new MongoClient(process.env.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nexport default authenticated(async function groceriesList(req, res) {\n  if (req.method != 'GET') {\n    res.json({\n      status: 'GET only'\n    });\n    return;\n  }\n\n  if (!client.isConnected()) {\n    await client.connect();\n  }\n\n  const db = client.db('groceriesDB');\n  const groceries = await db.collection('groceries').find().toArray();\n  res.json(groceries);\n});","map":{"version":3,"sources":["C:/Dev/Sandbox/next/next-starter/pages/api/groceries/index.ts"],"names":["MongoClient","verify","authenticated","fn","req","res","decoded","headers","authorization","process","env","JWT_SECRET","err","status","json","message","client","MONGODB_URI","useNewUrlParser","useUnifiedTopology","groceriesList","method","isConnected","connect","db","groceries","collection","find","toArray"],"mappings":"AACA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,MAAT,QAAuB,cAAvB;;AAEA,MAAMC,aAAa,GAAIC,EAAD,IAAwB,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAC/F,MAAIC,OAAO,GAAGL,MAAM,CAACG,GAAG,CAACG,OAAJ,CAAYC,aAAb,EAA4BC,OAAO,CAACC,GAAR,CAAYC,UAAxC,EAAoD,gBAAgBC,GAAhB,EAAqBN,OAArB,EAA8B;AAClG,QAAI,CAACM,GAAD,IAAQN,OAAZ,EAAqB;AACjB,aAAO,MAAMH,EAAE,CAACC,GAAD,EAAMC,GAAN,CAAf;AACH;;AAEDA,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACH,GANmB,CAApB;AAOH,CARD;;AAUA,MAAMC,MAAM,GAAG,IAAIhB,WAAJ,CAAgBS,OAAO,CAACC,GAAR,CAAYO,WAA5B,EAAyC;AACpDC,EAAAA,eAAe,EAAE,IADmC;AAEpDC,EAAAA,kBAAkB,EAAE;AAFgC,CAAzC,CAAf;AAKA,eAAejB,aAAa,CAAC,eAAekB,aAAf,CACzBhB,GADyB,EAEzBC,GAFyB,EAG3B;AACE,MAAID,GAAG,CAACiB,MAAJ,IAAc,KAAlB,EAAyB;AACrBhB,IAAAA,GAAG,CAACS,IAAJ,CAAS;AAAED,MAAAA,MAAM,EAAE;AAAV,KAAT;AACA;AACH;;AAED,MAAI,CAACG,MAAM,CAACM,WAAP,EAAL,EAA2B;AACvB,UAAMN,MAAM,CAACO,OAAP,EAAN;AACH;;AAED,QAAMC,EAAE,GAAGR,MAAM,CAACQ,EAAP,CAAU,aAAV,CAAX;AACA,QAAMC,SAAS,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,WAAd,EAA2BC,IAA3B,GAAkCC,OAAlC,EAAxB;AAEAvB,EAAAA,GAAG,CAACS,IAAJ,CAASW,SAAT;AACH,CAjB2B,CAA5B","sourcesContent":["import { NextApiRequest, NextApiResponse, NextApiHandler } from 'next';\r\nimport { MongoClient } from 'mongodb';\r\nimport { verify } from 'jsonwebtoken';\r\n\r\nconst authenticated = (fn: NextApiHandler) => async (req: NextApiRequest, res: NextApiResponse) => {\r\n    var decoded = verify(req.headers.authorization, process.env.JWT_SECRET, async function (err, decoded) {\r\n        if (!err && decoded) {\r\n            return await fn(req, res);\r\n        }\r\n\r\n        res.status(500).json({ message: 'Sorry you are not authenticated' });\r\n    });\r\n}\r\n\r\nconst client = new MongoClient(process.env.MONGODB_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n});\r\n\r\nexport default authenticated(async function groceriesList(\r\n    req: NextApiRequest,\r\n    res: NextApiResponse\r\n) {\r\n    if (req.method != 'GET') {\r\n        res.json({ status: 'GET only' });\r\n        return;\r\n    }\r\n\r\n    if (!client.isConnected()) {\r\n        await client.connect();\r\n    }\r\n\r\n    const db = client.db('groceriesDB');\r\n    const groceries = await db.collection('groceries').find().toArray();\r\n\r\n    res.json(groceries);\r\n});"]},"metadata":{},"sourceType":"module"}