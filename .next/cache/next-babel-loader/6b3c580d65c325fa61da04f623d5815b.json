{"ast":null,"code":"import { MongoClient } from 'mongodb';\nimport { hash } from 'bcrypt';\nconst client = new MongoClient(process.env.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nexport default async function signup(req, res) {\n  const name = req.body.name;\n  const email = req.body.email;\n  const password = req.body.password;\n\n  if (!name || name.trim().length == 0 || !email || email.trim().length == 0 || !password || password.trim().length == 0) {\n    res.json({\n      status: 'Name, email, and password are all required'\n    });\n    return;\n  }\n\n  if (!client.isConnected()) {\n    await client.connect();\n  }\n\n  const db = client.db('groceriesDB');\n  const existingUser = await db.collection('users').findOne({\n    \"email\": req.body.email\n  });\n\n  if (existingUser) {\n    res.json({\n      status: 'Email address already in use'\n    });\n  } else {\n    hash(req.body.password, 10, async function (err, hash) {\n      const data = {\n        name: req.body.name,\n        email: req.body.email,\n        password: hash\n      };\n      res.json(data);\n    });\n  }\n}","map":{"version":3,"sources":["C:/Dev/Sandbox/next/next-starter/pages/api/user/signup.ts"],"names":["MongoClient","hash","client","process","env","MONGODB_URI","useNewUrlParser","useUnifiedTopology","signup","req","res","name","body","email","password","trim","length","json","status","isConnected","connect","db","existingUser","collection","findOne","err","data"],"mappings":"AACA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,MAAMC,MAAM,GAAG,IAAIF,WAAJ,CAAgBG,OAAO,CAACC,GAAR,CAAYC,WAA5B,EAAyC;AACpDC,EAAAA,eAAe,EAAE,IADmC;AAEpDC,EAAAA,kBAAkB,EAAE;AAFgC,CAAzC,CAAf;AAKA,eAAe,eAAeC,MAAf,CACXC,GADW,EAEXC,GAFW,EAGb;AACE,QAAMC,IAAY,GAAGF,GAAG,CAACG,IAAJ,CAASD,IAA9B;AACA,QAAME,KAAa,GAAGJ,GAAG,CAACG,IAAJ,CAASC,KAA/B;AACA,QAAMC,QAAgB,GAAGL,GAAG,CAACG,IAAJ,CAASE,QAAlC;;AAEA,MAAG,CAACH,IAAD,IAASA,IAAI,CAACI,IAAL,GAAYC,MAAZ,IAAsB,CAA/B,IAAoC,CAACH,KAArC,IAA8CA,KAAK,CAACE,IAAN,GAAaC,MAAb,IAAuB,CAArE,IAA0E,CAACF,QAA3E,IAAuFA,QAAQ,CAACC,IAAT,GAAgBC,MAAhB,IAA0B,CAApH,EAAuH;AACnHN,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAT;AACA;AACH;;AAED,MAAG,CAAChB,MAAM,CAACiB,WAAP,EAAJ,EAA0B;AACtB,UAAMjB,MAAM,CAACkB,OAAP,EAAN;AACH;;AAED,QAAMC,EAAE,GAAGnB,MAAM,CAACmB,EAAP,CAAU,aAAV,CAAX;AACA,QAAMC,YAAY,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B;AAAE,aAASf,GAAG,CAACG,IAAJ,CAASC;AAApB,GAA/B,CAA3B;;AAEA,MAAGS,YAAH,EAAiB;AACbZ,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACH,GAFD,MAEO;AACHjB,IAAAA,IAAI,CAACQ,GAAG,CAACG,IAAJ,CAASE,QAAV,EAAoB,EAApB,EAAwB,gBAAeW,GAAf,EAAoBxB,IAApB,EAA0B;AAClD,YAAMyB,IAAI,GAAG;AACTf,QAAAA,IAAI,EAAEF,GAAG,CAACG,IAAJ,CAASD,IADN;AAETE,QAAAA,KAAK,EAAEJ,GAAG,CAACG,IAAJ,CAASC,KAFP;AAGTC,QAAAA,QAAQ,EAAEb;AAHD,OAAb;AAMAS,MAAAA,GAAG,CAACO,IAAJ,CAASS,IAAT;AACH,KARG,CAAJ;AASH;AACJ","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\r\nimport { MongoClient } from 'mongodb'; \r\nimport { hash } from 'bcrypt';\r\n\r\nconst client = new MongoClient(process.env.MONGODB_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n});\r\n\r\nexport default async function signup(\r\n    req: NextApiRequest,\r\n    res: NextApiResponse\r\n) {\r\n    const name: string = req.body.name;\r\n    const email: string = req.body.email;\r\n    const password: string = req.body.password;\r\n\r\n    if(!name || name.trim().length == 0 || !email || email.trim().length == 0 || !password || password.trim().length == 0) {\r\n        res.json({status: 'Name, email, and password are all required'});\r\n        return;\r\n    }\r\n\r\n    if(!client.isConnected()) {\r\n        await client.connect();\r\n    }\r\n\r\n    const db = client.db('groceriesDB');\r\n    const existingUser = await db.collection('users').findOne({ \"email\": req.body.email });\r\n\r\n    if(existingUser) {\r\n        res.json({ status: 'Email address already in use' });\r\n    } else {\r\n        hash(req.body.password, 10, async function(err, hash) {\r\n            const data = {\r\n                name: req.body.name,\r\n                email: req.body.email,\r\n                password: hash\r\n            };\r\n        \r\n            res.json(data);\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}