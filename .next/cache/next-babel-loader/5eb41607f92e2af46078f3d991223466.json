{"ast":null,"code":"import { MongoClient } from 'mongodb';\nconst client = new MongoClient(process.env.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nexport default async function login(req, res) {\n  if (req.method != 'POST') {\n    res.json({\n      status: 'POST only'\n    });\n    return;\n  }\n\n  const email = req.body.email;\n  const password = req.body.password; //\n  // Validate that parameters were supplied\n  //\n\n  if (!email || email.trim().length == 0 || !password || password.trim().length == 0) {\n    res.json({\n      status: 'Name, email, and password are all required'\n    });\n    return;\n  }\n\n  if (!client.isConnected()) {\n    await client.connect();\n  }\n\n  const db = client.db('groceriesDB');\n  const existingUser = await db.collection('users').findOne({\n    \"email\": email\n  });\n\n  if (!existingUser) {\n    res.json({\n      status: 'Unsuccessful login'\n    });\n  } else {\n    res.json({\n      status: 'Successful login'\n    });\n  }\n}","map":{"version":3,"sources":["C:/Dev/Sandbox/next/next-starter/pages/api/user/login.ts"],"names":["MongoClient","client","process","env","MONGODB_URI","useNewUrlParser","useUnifiedTopology","login","req","res","method","json","status","email","body","password","trim","length","isConnected","connect","db","existingUser","collection","findOne"],"mappings":"AACA,SAASA,WAAT,QAA4B,SAA5B;AAGA,MAAMC,MAAM,GAAG,IAAID,WAAJ,CAAgBE,OAAO,CAACC,GAAR,CAAYC,WAA5B,EAAyC;AACpDC,EAAAA,eAAe,EAAE,IADmC;AAEpDC,EAAAA,kBAAkB,EAAE;AAFgC,CAAzC,CAAf;AAKA,eAAe,eAAeC,KAAf,CACXC,GADW,EAEXC,GAFW,EAGb;AACE,MAAGD,GAAG,CAACE,MAAJ,IAAc,MAAjB,EAAyB;AACrBD,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAT;AACA;AACH;;AAED,QAAMC,KAAa,GAAGL,GAAG,CAACM,IAAJ,CAASD,KAA/B;AACA,QAAME,QAAgB,GAAGP,GAAG,CAACM,IAAJ,CAASC,QAAlC,CAPF,CASE;AACA;AACA;;AACA,MAAI,CAACF,KAAD,IAAUA,KAAK,CAACG,IAAN,GAAaC,MAAb,IAAuB,CAAjC,IAAsC,CAACF,QAAvC,IAAmDA,QAAQ,CAACC,IAAT,GAAgBC,MAAhB,IAA0B,CAAjF,EAAoF;AAChFR,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACA;AACH;;AAED,MAAI,CAACX,MAAM,CAACiB,WAAP,EAAL,EAA2B;AACvB,UAAMjB,MAAM,CAACkB,OAAP,EAAN;AACH;;AAED,QAAMC,EAAE,GAAGnB,MAAM,CAACmB,EAAP,CAAU,aAAV,CAAX;AACA,QAAMC,YAAY,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B;AAAE,aAASV;AAAX,GAA/B,CAA3B;;AAEA,MAAI,CAACQ,YAAL,EAAmB;AACfZ,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACH,GAFD,MAEO;AACHH,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACH;AACJ","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\r\nimport { MongoClient } from 'mongodb';\r\nimport { compare } from 'bcrypt';\r\n\r\nconst client = new MongoClient(process.env.MONGODB_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n});\r\n\r\nexport default async function login(\r\n    req: NextApiRequest,\r\n    res: NextApiResponse\r\n) {\r\n    if(req.method != 'POST') {\r\n        res.json({status: 'POST only'});\r\n        return;\r\n    }\r\n\r\n    const email: string = req.body.email;\r\n    const password: string = req.body.password;\r\n\r\n    //\r\n    // Validate that parameters were supplied\r\n    //\r\n    if (!email || email.trim().length == 0 || !password || password.trim().length == 0) {\r\n        res.json({ status: 'Name, email, and password are all required' });\r\n        return;\r\n    }\r\n\r\n    if (!client.isConnected()) {\r\n        await client.connect();\r\n    }\r\n\r\n    const db = client.db('groceriesDB');\r\n    const existingUser = await db.collection('users').findOne({ \"email\": email });\r\n\r\n    if (!existingUser) {\r\n        res.json({ status: 'Unsuccessful login' });\r\n    } else {\r\n        res.json({ status: 'Successful login' });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}