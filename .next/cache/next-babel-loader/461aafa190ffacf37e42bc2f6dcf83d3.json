{"ast":null,"code":"import { MongoClient } from 'mongodb';\nimport { hash } from 'bcrypt';\nconst client = new MongoClient(process.env.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nexport default async function signup(req, res) {\n  const name = req.body.name;\n  const email = req.body.email;\n  const password = req.body.password; //\n  // Validate that parameters were supplied\n  //\n\n  if (!name || name.trim().length == 0 || !email || email.trim().length == 0 || !password || password.trim().length == 0) {\n    res.json({\n      status: 'Name, email, and password are all required'\n    });\n    return;\n  } //\n  // Validate password length\n  //\n\n\n  if (password.length < 10) {\n    res.json({\n      status: 'Password must be at least 10 characters long'\n    });\n    return;\n  }\n\n  if (!client.isConnected()) {\n    await client.connect();\n  }\n\n  const db = client.db('groceriesDB');\n  const existingUser = await db.collection('users').findOne({\n    \"email\": email\n  });\n\n  if (existingUser) {\n    res.json({\n      status: 'Email address already in use'\n    });\n  } else {\n    hash(req.body.password, 10, async function (err, hash) {\n      const user = {\n        username: email,\n        email: email,\n        name: name,\n        password: hash,\n        stores: []\n      };\n      await db.collection('users').insertOne(user);\n      res.json({\n        status: 'ok'\n      });\n    });\n  }\n}","map":{"version":3,"sources":["C:/Dev/Sandbox/next/next-starter/pages/api/user/signup.ts"],"names":["MongoClient","hash","client","process","env","MONGODB_URI","useNewUrlParser","useUnifiedTopology","signup","req","res","name","body","email","password","trim","length","json","status","isConnected","connect","db","existingUser","collection","findOne","err","user","username","stores","insertOne"],"mappings":"AACA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,MAAMC,MAAM,GAAG,IAAIF,WAAJ,CAAgBG,OAAO,CAACC,GAAR,CAAYC,WAA5B,EAAyC;AACpDC,EAAAA,eAAe,EAAE,IADmC;AAEpDC,EAAAA,kBAAkB,EAAE;AAFgC,CAAzC,CAAf;AAKA,eAAe,eAAeC,MAAf,CACXC,GADW,EAEXC,GAFW,EAGb;AACE,QAAMC,IAAY,GAAGF,GAAG,CAACG,IAAJ,CAASD,IAA9B;AACA,QAAME,KAAa,GAAGJ,GAAG,CAACG,IAAJ,CAASC,KAA/B;AACA,QAAMC,QAAgB,GAAGL,GAAG,CAACG,IAAJ,CAASE,QAAlC,CAHF,CAKE;AACA;AACA;;AACA,MAAI,CAACH,IAAD,IAASA,IAAI,CAACI,IAAL,GAAYC,MAAZ,IAAsB,CAA/B,IAAoC,CAACH,KAArC,IAA8CA,KAAK,CAACE,IAAN,GAAaC,MAAb,IAAuB,CAArE,IAA0E,CAACF,QAA3E,IAAuFA,QAAQ,CAACC,IAAT,GAAgBC,MAAhB,IAA0B,CAArH,EAAwH;AACpHN,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACA;AACH,GAXH,CAaE;AACA;AACA;;;AACA,MAAGJ,QAAQ,CAACE,MAAT,GAAkB,EAArB,EAAyB;AACrBN,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACA;AACH;;AAED,MAAI,CAAChB,MAAM,CAACiB,WAAP,EAAL,EAA2B;AACvB,UAAMjB,MAAM,CAACkB,OAAP,EAAN;AACH;;AAED,QAAMC,EAAE,GAAGnB,MAAM,CAACmB,EAAP,CAAU,aAAV,CAAX;AACA,QAAMC,YAAY,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B;AAAE,aAASX;AAAX,GAA/B,CAA3B;;AAEA,MAAIS,YAAJ,EAAkB;AACdZ,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACH,GAFD,MAEO;AACHjB,IAAAA,IAAI,CAACQ,GAAG,CAACG,IAAJ,CAASE,QAAV,EAAoB,EAApB,EAAwB,gBAAgBW,GAAhB,EAAqBxB,IAArB,EAA2B;AACnD,YAAMyB,IAAI,GAAG;AACTC,QAAAA,QAAQ,EAAEd,KADD;AAETA,QAAAA,KAAK,EAAEA,KAFE;AAGTF,QAAAA,IAAI,EAAEA,IAHG;AAITG,QAAAA,QAAQ,EAAEb,IAJD;AAKT2B,QAAAA,MAAM,EAAE;AALC,OAAb;AAQA,YAAMP,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBM,SAAvB,CAAiCH,IAAjC,CAAN;AAEAhB,MAAAA,GAAG,CAACO,IAAJ,CAAS;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAT;AACH,KAZG,CAAJ;AAaH;AACJ","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\r\nimport { MongoClient } from 'mongodb';\r\nimport { hash } from 'bcrypt';\r\n\r\nconst client = new MongoClient(process.env.MONGODB_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n});\r\n\r\nexport default async function signup(\r\n    req: NextApiRequest,\r\n    res: NextApiResponse\r\n) {\r\n    const name: string = req.body.name;\r\n    const email: string = req.body.email;\r\n    const password: string = req.body.password;\r\n\r\n    //\r\n    // Validate that parameters were supplied\r\n    //\r\n    if (!name || name.trim().length == 0 || !email || email.trim().length == 0 || !password || password.trim().length == 0) {\r\n        res.json({ status: 'Name, email, and password are all required' });\r\n        return;\r\n    }\r\n\r\n    //\r\n    // Validate password length\r\n    //\r\n    if(password.length < 10) {\r\n        res.json({ status: 'Password must be at least 10 characters long'});\r\n        return;\r\n    }\r\n\r\n    if (!client.isConnected()) {\r\n        await client.connect();\r\n    }\r\n\r\n    const db = client.db('groceriesDB');\r\n    const existingUser = await db.collection('users').findOne({ \"email\": email });\r\n\r\n    if (existingUser) {\r\n        res.json({ status: 'Email address already in use' });\r\n    } else {\r\n        hash(req.body.password, 10, async function (err, hash) {\r\n            const user = {\r\n                username: email,\r\n                email: email,\r\n                name: name,\r\n                password: hash,\r\n                stores: []\r\n            };\r\n\r\n            await db.collection('users').insertOne(user);\r\n\r\n            res.json({status: 'ok'});\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}