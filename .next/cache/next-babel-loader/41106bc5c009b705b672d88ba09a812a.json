{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\Sandbox\\\\next\\\\next-starter\\\\pages\\\\groceries.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Router from 'next/router'; //const apiUrl = 'https://next-mongodb-nine.now.sh/api/daily';\n\nconst apiUrl = 'http://localhost:3000/api/groceries';\n\nconst Groceries = ({\n  groceries\n}) => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, \"Groceries Page\", __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, JSON.stringify(groceries, undefined, 2)));\n};\n\nGroceries.getInitialProps = async ctx => {\n  const json = await myGet(apiUrl, ctx);\n  return {\n    groceries: json\n  };\n};\n\nasync function myGet(url, ctx) {\n  var _ctx$req;\n\n  const cookie = (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie;\n  const resp = await fetch(url, {\n    headers: {\n      cookie: cookie\n    }\n  });\n\n  if (resp.status === 401 && !ctx.req) {\n    Router.replace('/login');\n    return;\n  }\n\n  if (resp.status === 401 && ctx.req) {\n    var _ctx$res;\n\n    ctx.res.writeHead(302, {\n      Location: 'http://localhost:3000/login'\n    });\n    (_ctx$res = ctx.res) === null || _ctx$res === void 0 ? void 0 : _ctx$res.end();\n    return;\n  }\n\n  const json = await resp.json();\n  return json;\n}\n\nexport default Groceries;","map":{"version":3,"sources":["C:/Dev/Sandbox/next/next-starter/pages/groceries.tsx"],"names":["React","fetch","Router","apiUrl","Groceries","groceries","JSON","stringify","undefined","getInitialProps","ctx","json","myGet","url","cookie","req","headers","resp","status","replace","res","writeHead","Location","end"],"mappings":";;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AACA,MAAMC,MAAM,GAAG,qCAAf;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AACjC,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,IAAI,CAACC,SAAL,CAAeF,SAAf,EAA0BG,SAA1B,EAAqC,CAArC,CADL,CAFJ,CADJ;AAQH,CATD;;AAWAJ,SAAS,CAACK,eAAV,GAA4B,MAAOC,GAAP,IAAgC;AACxD,QAAMC,IAAI,GAAG,MAAMC,KAAK,CAACT,MAAD,EAASO,GAAT,CAAxB;AACA,SAAO;AAAEL,IAAAA,SAAS,EAAEM;AAAb,GAAP;AACH,CAHD;;AAKA,eAAeC,KAAf,CAAqBC,GAArB,EAAkCH,GAAlC,EAAwD;AAAA;;AACpD,QAAMI,MAAM,eAAGJ,GAAG,CAACK,GAAP,6CAAG,SAASC,OAAT,CAAiBF,MAAhC;AAEA,QAAMG,IAAI,GAAG,MAAMhB,KAAK,CAACY,GAAD,EAAM;AAC1BG,IAAAA,OAAO,EAAE;AACLF,MAAAA,MAAM,EAAEA;AADH;AADiB,GAAN,CAAxB;;AAMA,MAAGG,IAAI,CAACC,MAAL,KAAgB,GAAhB,IAAuB,CAACR,GAAG,CAACK,GAA/B,EAAoC;AAChCb,IAAAA,MAAM,CAACiB,OAAP,CAAe,QAAf;AACA;AACH;;AAED,MAAGF,IAAI,CAACC,MAAL,KAAgB,GAAhB,IAAuBR,GAAG,CAACK,GAA9B,EAAmC;AAAA;;AAC/BL,IAAAA,GAAG,CAACU,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AACpBC,MAAAA,QAAQ,EAAE;AADU,KAAvB;AAIA,gBAAAZ,GAAG,CAACU,GAAJ,sDAASG,GAAT;AACA;AACH;;AAED,QAAMZ,IAAI,GAAG,MAAMM,IAAI,CAACN,IAAL,EAAnB;AACA,SAAOA,IAAP;AACH;;AAGD,eAAeP,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport { NextPageContext, NextPage } from 'next';\r\nimport Router from 'next/router';\r\n\r\n//const apiUrl = 'https://next-mongodb-nine.now.sh/api/daily';\r\nconst apiUrl = 'http://localhost:3000/api/groceries';\r\n\r\nconst Groceries = ({ groceries }) => {\r\n    return (\r\n        <div>\r\n            Groceries Page\r\n            <pre>\r\n                {JSON.stringify(groceries, undefined, 2)}\r\n            </pre>\r\n        </div>\r\n    );\r\n}\r\n\r\nGroceries.getInitialProps = async (ctx: NextPageContext) => {\r\n    const json = await myGet(apiUrl, ctx);\r\n    return { groceries: json };\r\n}\r\n\r\nasync function myGet(url: string, ctx: NextPageContext) {\r\n    const cookie = ctx.req?.headers.cookie;\r\n\r\n    const resp = await fetch(url, {\r\n        headers: {\r\n            cookie: cookie!\r\n        }\r\n    });\r\n\r\n    if(resp.status === 401 && !ctx.req) {\r\n        Router.replace('/login');\r\n        return;\r\n    }\r\n\r\n    if(resp.status === 401 && ctx.req) {\r\n        ctx.res.writeHead(302, {\r\n           Location: 'http://localhost:3000/login' \r\n        });\r\n\r\n        ctx.res?.end();\r\n        return;\r\n    }\r\n\r\n    const json = await resp.json();\r\n    return json;\r\n}\r\n\r\n\r\nexport default Groceries;"]},"metadata":{},"sourceType":"module"}