{"ast":null,"code":"import { hash } from 'bcrypt';\nimport { database } from '../../../middleware/database';\nexport default database(async function signup(req, res) {\n  if (req.method != 'POST') {\n    res.json({\n      status: 'POST only'\n    });\n    return;\n  }\n\n  const name = req.body.name;\n  const email = req.body.email;\n  const password = req.body.password; //\n  // Validate that parameters were supplied\n  //\n\n  if (!name || name.trim().length == 0 || !email || email.trim().length == 0 || !password || password.trim().length == 0) {\n    res.json({\n      status: 'Name, email, and password are all required'\n    });\n    return;\n  } //\n  // Validate password length\n  //\n\n\n  if (password.length < 10) {\n    res.json({\n      status: 'Password must be at least 10 characters long'\n    });\n    return;\n  }\n\n  const db = req.db;\n  const collection = db.collection('users');\n  const existingUser = await collection.findOne({\n    \"email\": email\n  });\n\n  if (existingUser) {\n    res.json({\n      status: 'Email address already in use'\n    });\n  } else {\n    hash(req.body.password, 10, async function (err, hash) {\n      const user = {\n        username: email,\n        email: email,\n        name: name,\n        password: hash,\n        stores: []\n      };\n      await collection.insertOne(user);\n      res.json({\n        status: 'ok'\n      });\n    });\n  }\n});","map":{"version":3,"sources":["C:/Dev/Sandbox/next/next-starter/pages/api/user/signup.ts"],"names":["hash","database","signup","req","res","method","json","status","name","body","email","password","trim","length","db","collection","existingUser","findOne","err","user","username","stores","insertOne"],"mappings":"AAEA,SAASA,IAAT,QAAqB,QAArB;AACA,SAASC,QAAT,QAA2C,8BAA3C;AAEA,eAAeA,QAAQ,CAAC,eAAeC,MAAf,CACpBC,GADoB,EAEpBC,GAFoB,EAGtB;AACE,MAAGD,GAAG,CAACE,MAAJ,IAAc,MAAjB,EAAyB;AACrBD,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAT;AACA;AACH;;AAED,QAAMC,IAAY,GAAGL,GAAG,CAACM,IAAJ,CAASD,IAA9B;AACA,QAAME,KAAa,GAAGP,GAAG,CAACM,IAAJ,CAASC,KAA/B;AACA,QAAMC,QAAgB,GAAGR,GAAG,CAACM,IAAJ,CAASE,QAAlC,CARF,CAUE;AACA;AACA;;AACA,MAAI,CAACH,IAAD,IAASA,IAAI,CAACI,IAAL,GAAYC,MAAZ,IAAsB,CAA/B,IAAoC,CAACH,KAArC,IAA8CA,KAAK,CAACE,IAAN,GAAaC,MAAb,IAAuB,CAArE,IAA0E,CAACF,QAA3E,IAAuFA,QAAQ,CAACC,IAAT,GAAgBC,MAAhB,IAA0B,CAArH,EAAwH;AACpHT,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACA;AACH,GAhBH,CAkBE;AACA;AACA;;;AACA,MAAGI,QAAQ,CAACE,MAAT,GAAkB,EAArB,EAAyB;AACrBT,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACA;AACH;;AAED,QAAMO,EAAE,GAAGX,GAAG,CAACW,EAAf;AACA,QAAMC,UAAU,GAAGD,EAAE,CAACC,UAAH,CAAc,OAAd,CAAnB;AACA,QAAMC,YAAY,GAAG,MAAMD,UAAU,CAACE,OAAX,CAAmB;AAAE,aAASP;AAAX,GAAnB,CAA3B;;AAEA,MAAIM,YAAJ,EAAkB;AACdZ,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAT;AACH,GAFD,MAEO;AACHP,IAAAA,IAAI,CAACG,GAAG,CAACM,IAAJ,CAASE,QAAV,EAAoB,EAApB,EAAwB,gBAAgBO,GAAhB,EAAqBlB,IAArB,EAA2B;AACnD,YAAMmB,IAAI,GAAG;AACTC,QAAAA,QAAQ,EAAEV,KADD;AAETA,QAAAA,KAAK,EAAEA,KAFE;AAGTF,QAAAA,IAAI,EAAEA,IAHG;AAITG,QAAAA,QAAQ,EAAEX,IAJD;AAKTqB,QAAAA,MAAM,EAAE;AALC,OAAb;AAQA,YAAMN,UAAU,CAACO,SAAX,CAAqBH,IAArB,CAAN;AAEAf,MAAAA,GAAG,CAACE,IAAJ,CAAS;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAT;AACH,KAZG,CAAJ;AAaH;AACJ,CAlDsB,CAAvB","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\r\nimport { MongoClient } from 'mongodb';\r\nimport { hash } from 'bcrypt';\r\nimport { database, MyNextApiRequest } from '../../../middleware/database';\r\n\r\nexport default database(async function signup(\r\n    req: MyNextApiRequest,\r\n    res: NextApiResponse\r\n) {\r\n    if(req.method != 'POST') {\r\n        res.json({status: 'POST only'});\r\n        return;\r\n    }\r\n\r\n    const name: string = req.body.name;\r\n    const email: string = req.body.email;\r\n    const password: string = req.body.password;\r\n\r\n    //\r\n    // Validate that parameters were supplied\r\n    //\r\n    if (!name || name.trim().length == 0 || !email || email.trim().length == 0 || !password || password.trim().length == 0) {\r\n        res.json({ status: 'Name, email, and password are all required' });\r\n        return;\r\n    }\r\n\r\n    //\r\n    // Validate password length\r\n    //\r\n    if(password.length < 10) {\r\n        res.json({ status: 'Password must be at least 10 characters long'});\r\n        return;\r\n    }\r\n\r\n    const db = req.db;\r\n    const collection = db.collection('users');\r\n    const existingUser = await collection.findOne({ \"email\": email });\r\n\r\n    if (existingUser) {\r\n        res.json({ status: 'Email address already in use' });\r\n    } else {\r\n        hash(req.body.password, 10, async function (err, hash) {\r\n            const user = {\r\n                username: email,\r\n                email: email,\r\n                name: name,\r\n                password: hash,\r\n                stores: []\r\n            };\r\n\r\n            await collection.insertOne(user);\r\n\r\n            res.json({status: 'ok'});\r\n        });\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}